package egovframework.msa.minuk.controller;

import javax.servlet.http.HttpServletRequest;

import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;

import egovframework.msa.minuk.service.ServiceAService;
import lombok.RequiredArgsConstructor;

@RequiredArgsConstructor
@RestController
@RequestMapping("/serviceA")
public class ServiceAController {
	private final RestTemplate restTemplate;
	private String serviceBUrl = "http://localhost:8082/serviceB";
	private final HttpServletRequest request;
	
	private final ServiceAService serviceAService;

	@GetMapping
	public String getServiceA() {
		return serviceAService.getServiceA();
	}
	
	@GetMapping("/serviceB")
	public ResponseEntity<String> callServiceB() {
	    String response = restTemplate.getForObject(serviceBUrl, String.class);
	    return ResponseEntity.ok(response);
	}
	
	@GetMapping("/serviceB/{message}")
	public ResponseEntity<String> callServiceBWithMessage(@PathVariable String message) {
	    HttpHeaders headers = new HttpHeaders();
	    headers.set("X-Source-Service", "serviceA");

	    HttpEntity<String> entity = new HttpEntity<>(headers);
	    String response = restTemplate.exchange(serviceBUrl + "/serviceB/" + message, HttpMethod.GET, entity, String.class).getBody();

	    return ResponseEntity.ok(response);
	}
    
	@GetMapping("/serviceA/{message}")
	public ResponseEntity<String> receive_message(@PathVariable String message, @RequestHeader(value = "X-Source-Service", required = false) String sourceService) {
	    if (sourceService == null || !"serviceB".equals(sourceService)) {
	        return ResponseEntity.status(HttpStatus.FORBIDDEN).body("This is the wrong path");
	    }

	    return ResponseEntity.ok(serviceAService.getServiceAMessage(message));
	}
}