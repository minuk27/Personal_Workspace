package egovframework.msa.minuk.config;

import io.jsonwebtoken.ExpiredJwtException;
import io.jsonwebtoken.JwtException;
import io.jsonwebtoken.Jwts;

import lombok.extern.slf4j.Slf4j;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.cloud.gateway.filter.GatewayFilter;
import org.springframework.cloud.gateway.filter.factory.AbstractGatewayFilterFactory;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.server.reactive.ServerHttpResponse;
import org.springframework.stereotype.Component;
import org.springframework.web.server.ServerWebExchange;

import reactor.core.publisher.Mono;

@Slf4j
@Component
@RequiredArgsConstructor
public class TokenFilter extends AbstractGatewayFilterFactory<TokenFilter.Config>{
	@Value("{jwt.secret}")
	private String secretKey;
	
	public TokenFilter() {
		super(Config.class);
	}
	
    @Override
    public GatewayFilter apply(Config config) {
        return (exchange, chain) -> {
            ServerHttpRequest request = exchange.getRequest();
            String authorizationHeader = request.getHeaders().getFirst(HttpHeaders.AUTHORIZATION);
            
            // 토큰 유효성 검사
            if (authorizationHeader != null && authorizationHeader.startsWith("Bearer ")) {
                String token = authorizationHeader.substring(7);
                try {
                    // JWT 토큰 유효성 검증
                    Jwts.parser().setSigningKey(TOKEN_SECRET).parseClaimsJws(token);
                } catch (ExpiredJwtException e) {
                    log.error("토큰 유효기간 만료: {}", e.getMessage());
                    return onError(exchange, "토큰 유효기간 만료", HttpStatus.UNAUTHORIZED);
                } catch (JwtException e) {
                    log.error("토큰 인증 오류: {}", e.getMessage());
                    return onError(exchange, "토큰 인증 오류", HttpStatus.UNAUTHORIZED);
                }
            } else {
                return onError(exchange, "Authorization 헤더가 필요합니다.", HttpStatus.UNAUTHORIZED);
            }

            // 유효성 검사 통과 시 요청을 계속 진행
            return chain.filter(exchange);
        };
    }
    
    private Mono<Void> onError(ServerWebExchange exchange, String error, HttpStatus httpStatus) {
        ServerHttpResponse response = exchange.getResponse();
        response.setStatusCode(httpStatus);
        return response.writeWith(Mono.just(response.bufferFactory().wrap(error.getBytes())));
    }

    public static class Config {
        // 구성 옵션이 필요하면 여기에 추가
    }
}
