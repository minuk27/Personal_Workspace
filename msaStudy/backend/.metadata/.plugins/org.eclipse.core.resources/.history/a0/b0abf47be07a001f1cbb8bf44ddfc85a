package egovframework.msa.minuk.config;

import org.springframework.cloud.gateway.filter.GatewayFilter;
import org.springframework.cloud.gateway.filter.factory.AbstractGatewayFilterFactory;
import org.springframework.http.HttpHeaders;
import org.springframework.stereotype.Component;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Mono;

@Component
public class TokenValidationFilter extends AbstractGatewayFilterFactory<TokenValidationFilter.Config> {

    public TokenValidationFilter() {
        super(Config.class);
    }

    @Override
    public GatewayFilter apply(Config config) {
        return (exchange, chain) -> {
            // 요청의 Authorization 헤더에서 토큰 추출
            String token = exchange.getRequest().getHeaders().getFirst(HttpHeaders.AUTHORIZATION);
            
            // 토큰 검증 로직
            if (token == null || !isValidToken(token)) {
                // 유효하지 않으면 401 Unauthorized 응답 반환
                exchange.getResponse().setStatusCode(HttpStatus.UNAUTHORIZED);
                return exchange.getResponse().setComplete();
            }

            // 유효하면 다음 필터로 진행
            return chain.filter(exchange);
        };
    }

    private boolean isValidToken(String token) {
        // 실제 토큰 유효성 검증 로직 (서명 검증, 만료 시간 체크 등)
        return true; // 예시로 항상 true 반환
    }

    public static class Config {
        // 추가 설정이 필요한 경우 여기서 정의
    }
}