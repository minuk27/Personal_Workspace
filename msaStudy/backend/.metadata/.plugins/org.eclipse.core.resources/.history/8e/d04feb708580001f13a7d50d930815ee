package egovframework.msa.minuk.service;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import egovframework.msa.minuk.common.DirectionStatus;
import egovframework.msa.minuk.domain.SendMailBox;
import egovframework.msa.minuk.domain.SendMailBoxRepository;
import egovframework.msa.minuk.domain.MailHome;
import egovframework.msa.minuk.domain.MailHomeRepository;
import egovframework.msa.minuk.domain.ReceiveMailBox;
import egovframework.msa.minuk.domain.ReceiveMailBoxRepository;
import egovframework.msa.minuk.messageDto.MailHomeDto;
import egovframework.msa.minuk.messageDto.MailListDto;
import egovframework.msa.minuk.messageDto.ReadMailDto;
import egovframework.msa.minuk.messageDto.SendMailDto;

@Service
public class MailService {
	
	@Autowired
	private MailHomeRepository mailHomeRepository;
	@Autowired
	private SendMailBoxRepository sendMailBoxRepository;
	@Autowired
	private ReceiveMailBoxRepository receiveMailBoxRepository;
	
	public MailHomeDto homeData(String userId) {
		Optional<MailHome> userMailHomeData = mailHomeRepository.findById(userId);
		
		return new MailHomeDto(
				userMailHomeData.get().getUserID(),
				userMailHomeData.get().getNewMail(), 
				userMailHomeData.get().getSendMailCnt(),
				userMailHomeData.get().getReceiveMailCnt());
	}

	public List<MailListDto> mailList(DirectionStatus dire, String userId) {
		
		switch(dire) {
		case SEND:
			List<SendMailBox> sendMailListData = sendMailBoxRepository.findByUserId(userId);
			return sendMailListData.stream()
								   .map(sendMailListData -> new MailListDto(
										   sendMailListData.getUserID(),
										   sendMailListData.getMailIndex(),
										   sendMailListData.getDate(),
										   sendMailListData.getReceiverID(),
										   sendMailListData.getTitle()))
								   .collect(Collectors.toList());
			break;
		case RECEIVE:
			List<ReceiveMailBox> receiveRailListData = receiveMailBoxRepository.findByUserId(userId);
			break;
		}
		return null;
	}

	public ReadMailDto mailData(DirectionStatus dire, String userId, int index) {
		switch(dire) {
		case SEND:
			break;
		case RECEIVE:
			break;
		}
		return null;
	}

	public boolean mailSend(SendMailDto sendMailData, String userId) {
		// TODO Auto-generated method stub
		return false;
	}
}