package egovframework.msa.minuk.filter;

import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;
import javax.servlet.FilterChain;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;

@Component
public class JwtAuthenticationFilter extends OncePerRequestFilter {

    @Override
    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
            throws ServletException, IOException {
        
        String path = request.getRequestURI();
        
        // 로그인과 회원가입 요청은 JWT 인증을 건너뜁니다.
        if (path.startsWith("/Signin") || path.startsWith("/Signup")) {
            filterChain.doFilter(request, response);
            return;
        }

        // JWT 검증 로직 (여기에 JWT 검증 코드를 추가합니다)
        String jwtToken = request.getHeader("Authorization");

        // JWT 토큰 유효성 검증
        if (isValidToken(jwtToken)) {
            // 토큰이 유효하면 요청을 계속 진행합니다.
            filterChain.doFilter(request, response);
        } else {
            // 토큰이 유효하지 않으면 401 Unauthorized 응답을 반환합니다.
            response.sendError(HttpServletResponse.SC_UNAUTHORIZED, "Unauthorized");
        }
    }

    private boolean isValidToken(String token) {
        // JWT 검증 로직을 구현합니다 (예: 서명 확인, 만료 여부 등)
        return token != null && token.startsWith("Bearer "); // 예시로 간단한 체크
    }
}