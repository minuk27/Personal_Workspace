package egovframework.msa.minuk.filter;

import org.springframework.cloud.gateway.filter.GatewayFilter;
import org.springframework.cloud.gateway.filter.factory.AbstractGatewayFilterFactory;
import org.springframework.http.*;
import org.springframework.stereotype.Component;

import egovframework.msa.minuk.config.JwtUtil;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Component
public class JwtAuthenticationFilter extends AbstractGatewayFilterFactory<JwtAuthenticationFilter.Config> {

    private final JwtUtil jwtUtil;

    // JwtUtil은 토큰 검증을 위한 유틸리티 클래스라고 가정합니다
    public JwtAuthenticationFilter(JwtUtil jwtUtil) {
        super(Config.class);
        this.jwtUtil = jwtUtil;
    }

    @Override
    public GatewayFilter apply(Config config) {
        return (exchange, chain) -> {
            // 요청의 Authorization 헤더를 가져옵니다
            String authorizationHeader = exchange.getRequest().getHeaders().getFirst(HttpHeaders.AUTHORIZATION);

            if (authorizationHeader == null || !authorizationHeader.startsWith("Bearer ")) {
                log.error("Authorization header is missing or invalid");
                exchange.getResponse().setStatusCode(HttpStatus.UNAUTHORIZED);
                return exchange.getResponse().setComplete();
            }

            // "Bearer "를 제외한 실제 토큰 값만 추출합니다
            String token = authorizationHeader.substring(7);

            // 토큰 유효성 검사
            if (!jwtUtil.validateToken(token)) {
                log.error("Invalid JWT token");
                exchange.getResponse().setStatusCode(HttpStatus.UNAUTHORIZED);
                return exchange.getResponse().setComplete();
            }

            // 토큰이 유효하다면 라우팅을 진행합니다
            return chain.filter(exchange);
        };
    }

    // Configuration 클래스 정의
    public static class Config {
        // 필터 설정 옵션 추가 가능
    }
}
