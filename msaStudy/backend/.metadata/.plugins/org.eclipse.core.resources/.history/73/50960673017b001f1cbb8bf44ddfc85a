package egovframework.msa.minuk.config;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.springframework.web.bind.annotation.RequestBody;

import egovframework.msa.minuk.userDto.LoginRequest;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

@Component
public class JwtTokenProvider {
	
	@Value("${jwt.secret}")
	private String SECRET_KEY;
    private final long EXPIRATION_TIME_ACCESS = 1000 * 30; // 30초?
    private final long EXPIRATION_TIME_REFRESH = 1000 * 30; // 30초?
    
    // JWT 토큰 생성
    public TokenResponse createJWT(@RequestBody LoginRequest loginRequest) {
    	
    	String accessToken, refreshToken;
    	
    	Claims accessClaims = Jwts.claims().setSubject(loginRequest.getUserID());
    	accessClaims.put("userID", loginRequest.getUserID());
    	accessClaims.put("password", loginRequest.getPassword());
        accessToken = offerJWT(accessClaims, EXPIRATION_TIME_ACCESS);
        
        Claims refreshClaims = Jwts.claims().setSubject(loginRequest.getUserID());
        refreshToken = offerJWT(refreshClaims, EXPIRATION_TIME_REFRESH);
        
        return new TokenResponse(accessToken, refreshToken);
    }
    
    // JWT 토큰 발급
    public String offerJWT(Map<String, Object> claims, long expirationTime) {
    	String jwt = Jwts.builder()
    					.setClaims(claims)
    					.setExpiration(new Date(System.currentTimeMillis() + expirationTime))
    					.signWith(SignatureAlgorithm.HS512, SECRET_KEY)
    					.compact();
    	
    	return jwt;
    }
}
