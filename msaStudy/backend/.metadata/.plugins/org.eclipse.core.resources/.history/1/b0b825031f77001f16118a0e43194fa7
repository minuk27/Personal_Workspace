package egovframework.msa.minuk.controller;

import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import egovframework.msa.minuk.auth.JwtResponse;
import egovframework.msa.minuk.auth.JwtTokenProvider;
import egovframework.msa.minuk.common.LoginStatus;
import egovframework.msa.minuk.common.TokenStatus;
import egovframework.msa.minuk.service.UserService;
import egovframework.msa.minuk.userDto.*;
import lombok.RequiredArgsConstructor;

@RequiredArgsConstructor
@RestController
@RequestMapping("/userService")
public class UserServiceController {
	
	private final UserService userService;
	private final JwtTokenProvider jwtTokenProvider;
	
	//테스트 페이지
	@GetMapping("/servicePage")
	public ResponseEntity<?> pageTest(HttpSession session) {
		Map<String, String> response = new HashMap<>();
		
		if(session == null || session.getAttribute("userID") == null) {
			return ResponseEntity.status(401).body("세션만료");
		}
		
		response.put("message", "안녕하세요");
		return ResponseEntity.ok(response);
	}
	
	//로그인
	@PostMapping("/Login")
	public ResponseEntity<?> userLogin(@RequestBody LoginRequest loginRequest) {
		System.out.print("실행");
		
		if(userService.loginCheck(loginRequest) == LoginStatus.SUCCESS) {
			String token = jwtTokenProvider.createToken(loginRequest.getUserID(), "ROLE_USER");
			
			return ResponseEntity.ok(new JwtResponse(token));
		}
		else {
			return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Invalid credentials");
		}
	}
	
	//회원가입
	@PostMapping("/Join")
	public ResponseEntity<Map<String, Object>> userJoin(@RequestBody JoinRequest joinRequest){
		Map<String, Object> response = new HashMap<>();
		
		if(userService.joinCheck(joinRequest)) {
			response.put("success", true);
            response.put("message", "회원가입 성공");
            return ResponseEntity.ok(response);
		}
		else {
			response.put("success", false);
            response.put("message", "회원가입 실패");
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(response);
		}
	}
	
}