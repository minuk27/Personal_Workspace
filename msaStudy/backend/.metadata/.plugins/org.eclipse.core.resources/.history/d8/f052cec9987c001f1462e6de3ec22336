package egovframework.msa.minuk.config;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.ExpiredJwtException;
import io.jsonwebtoken.JwtBuilder;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import io.jsonwebtoken.io.Decoders;
import io.jsonwebtoken.security.Keys;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.springframework.web.bind.annotation.RequestBody;

import egovframework.msa.minuk.userDto.LoginRequest;
import egovframework.msa.minuk.userDto.TokenResponse;

import java.util.Date;
import java.util.HashMap;
//import java.util.HashMap;
import java.util.Map;

import javax.crypto.SecretKey;

@Component
public class JwtTokenProvider {
	
	private static final String SECRET_KEY = "your_secret_key"; // 비밀 키
    private static final long EXPIRATION_TIME = 86400000; // 1일 (밀리초)
    
    // JWT 토큰 생성
    public TokenResponse createJWT(@RequestBody LoginRequest loginRequest) {
    	

    }
    
    // JWT 토큰 발급
    public String offerJWT(Map<String, Object> claims, long expirationTime) {
    	SecretKey key = Keys.hmacShaKeyFor(Decoders.BASE64URL.decode(SECRET_KEY));
    	
    	String jwt = Jwts.builder()
    					.setClaims(claims)
    					.setExpiration(new Date(System.currentTimeMillis() + expirationTime))
    					.signWith(SignatureAlgorithm.HS512, key)
    					.compact();
    	
    	return jwt;
    }
    
    public String reissue(String refreshToken) {
    	try {
    		Claims claims = Jwts.parser()
    							.setSigningKey(SECRET_KEY)
    							.parseClaimsJws(refreshToken)
    							.getBody();
    		
    		String userId = claims.getSubject();
    		
    		Claims newAccessClaims = Jwts.claims().setSubject(userId);
    		String newAccessToken = offerJWT(newAccessClaims, EXPIRATION_TIME_ACCESS);
    		
    		return newAccessToken;
    	} catch(ExpiredJwtException e) {
    		return "error";
    	} catch(Exception e) {
    		return "error";
    	}
    	
    }
}
